install.packages("slidify")
find.package("devtools")
package.install("KernSmooth")
install.package("KernSmooth")
find.package("KernSmooth")
print(KernSmooth)
library(KernSmooth)
clear
source('C:/Users/rbro/DataScience/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/rbro/DataScience/ProgrammingAssignment2/cachematrix.R')
test <- matrix(1:4, 2,2)
makeCacheMatrix(test)
source('C:/Users/rbro/DataScience/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(test)
cacheSolve(test)
x <- makeCacheMatrix(test)
x
cacheSolve(x)
CacheSolve(x)
cacheSolve(x)
cacheSolve(x)
source('C:/Users/rbro/DataScience/ProgrammingAssignment2/cachematrix.R')
test
f <- makeCacheMatrix(test)
cacheSolve(f)
test <- matrix(1:100, 10, 10)
test
solve(test)
test <- matrix(1:4, 10, 10)
test
solve(test)
cacheSolve(f)
cacheSolve(x)
source('C:/Users/rbro/DataScience/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/rbro/DataScience/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/rbro/DataScience/ProgrammingAssignment2/cachematrix.R')
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("httpuv")
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("GCDQuiz2", "d311e9cdc51e6e9dc371", "273b4986f4fc6e44f72b1045f7f96a45b02c0fc4")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
names(req)
req$times
req$url
req$headers
class(req)
data <- content(req)
class(data)
names(data)
data
as.data.frame(data)
json <- jsonlite::fromJSON(toJSON(data))
library(json)
library(jsonlite)
fromJSON(data)
json <- jsonlite::fromJSON(toJSON(data))
json
names(json)
json$name
json$name$datasharing
json$datasharing
json
json$name
json["datasharing",]
json["name == datasharing",]
json$name == "datasharing"
json$datasharing
names(json)
json$created_at
json$name
library(swirl)
ls()
rm(list=ls())
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
read.csv
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?manip
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -(x:size))
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country %in% "India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(2,5,NA,10))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version) )
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
source('C:/Users/rbro/AppData/Local/Temp/RtmpSAFSQm/summarize1.R')
submit()
pack_sum
quantile(packsum$count, probs = 0.99)
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()
?select
source('C:/Users/rbro/AppData/Local/Temp/RtmpSAFSQm/chain1.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpSAFSQm/chain2.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpSAFSQm/chain2.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpSAFSQm/chain3.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpSAFSQm/chain4.R')
submit()
bye()
swirl()
library(swirl)
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script1.R')
submit()
\students3
students3
?gather
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
submit()
reset()
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script2.R')
submit()
?spread
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script3.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script3.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script3.R')
submit()
extract_numeric("class5")
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script4.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script4.R')
?mutate
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script4.R')
submit()
students4
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script5.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script6.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script7.R')
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed, failed)
sat
?select
?gather
?separate
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
?select
?gather
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script8.R')
submit()
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script9.R')
?mutate
source('C:/Users/rbro/AppData/Local/Temp/RtmpWkZeXU/script9.R')
submit()
Sys,getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(packge = lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hours(now()), minutes = minutes(now())
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now())
update(this_moment, hours = hour(now()), minutes = minute(now())
this_moment <- update(this_moment, hours = now(), minutes = now())
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tzone = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
bye()
swirl()
library(swirl)
swirl()
skip()
students
?gather
skip()
skip()
skip()
skip()
skip()
swirl()
2
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
0
bye()
result3 <-
cran %>%
group_by(package) %>%
summarize(count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size)
) %>%
filter(countries > 60) %>%
arrange(desc(countries), avg_bytes)
# Print result to console
print(result3)
setwd("C:/Users/rbro/DataScience/GettingandCleaningData/ClassProject")
## Loading dplyr and tidyr packages
library(tidyr)
library(plyr)
library(dplyr)
## Loading all relevant raw data into workspace and formatting to that dplyr can use it
ytest <- tbl_df(read.table("test/y_test.txt", stringsAsFactors = FALSE)) #Activity codes for test data
subtest <- tbl_df(read.table("test/subject_test.txt", stringsAsFactors = FALSE)) #Subject codes for test data
xtest <- tbl_df(read.table("test/x_test.txt", stringsAsFactors = FALSE)) # Observations for test data
ytrain <- tbl_df(read.table("train/y_train.txt", stringsAsFactors = FALSE)) #Activity codes for training data
subtrain <- tbl_df(read.table("train/subject_train.txt", stringsAsFactors = FALSE)) #Subject codes for training data
xtrain <- tbl_df(read.table("train/x_train.txt", stringsAsFactors = FALSE)) # observations for training data
features <- tbl_df(read.table("features.txt", stringsAsFactors = FALSE)) # Column headers for test and training data
labels <- tbl_df(read.table("activity_labels.txt", stringsAsFactors = FALSE)) # Activity to code index table
##Adding test and training data columns using the features table
names(xtest) <- features$V2
names(xtrain) <- features$V2
## Renaming columns for joining
names(ytest)[1] <- "activity_code"
names(subtest)[1] <- "subject_code"
names(ytrain)[1] <- "activity_code"
names(subtrain)[1] <- "subject_code"
names(labels) <- c("activity_code", "activity_name")
## Adding the subjects and activity codes to the test and training dataset
newtest <- tbl_df(cbind(xtest, ytest, subtest))
newtrain <- tbl_df(cbind(xtrain, ytrain, subtrain))
## Add identifier to the end of each data set to identify test or training record
newtest  <- mutate(newtest, experiment_type = "test")
newtrain  <- mutate(newtrain, experiment_type = "train")
totaldata <- rbind(newtest, newtrain) #Merge the two datasets to get a combined table
totaldata <- tbl_df(join(totaldata, labels)) #Adding activity labels
totaldata <-
totaldata %>%
select(contains("mean()"), contains("std()"), subject_code:activity_name) %>%  #Selecting columns with only means and standard deviations
gather(measure_type, measure, -(subject_code:activity_name)) %>%  #Tidy the data so that each column only displays one variable
arrange(subject_code, activity_name, measure_type) #ordering the data set
## Created a separate, grouped data set summarized by the average measure (mean or standard dev)
## for each subject (person), activity and measurement type.
datasummary <- summarise(group_by(totaldata, subject_code, activity_name, measure_type), average_of_measure = mean(measure))
write.table(datasummary,file = "summary.txt", row.name = FALSE) # print to file
